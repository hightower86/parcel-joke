{"id":"node_modules/postcss/lib/comment.js","dependencies":[{"name":"/Users/macbook/Desktop/KODING/Traversy-Media/parcel/parsel-joke/package.json","includedInParent":true,"mtime":1565716104892},{"name":"/Users/macbook/Desktop/KODING/Traversy-Media/parcel/parsel-joke/node_modules/postcss/package.json","includedInParent":true,"mtime":1558416471631},{"name":"./node","loc":{"line":5,"column":20},"parent":"/Users/macbook/Desktop/KODING/Traversy-Media/parcel/parsel-joke/node_modules/postcss/lib/comment.js","resolved":"/Users/macbook/Desktop/KODING/Traversy-Media/parcel/parsel-joke/node_modules/postcss/lib/node.js"}],"generated":{"js":"'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function (obj) { return typeof obj; }; } else { _typeof = function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nexports.__esModule = true;\n\nvar _node = require('./node');\n\nvar _node2 = _interopRequireDefault(_node);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (_typeof(call) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + _typeof(superClass));\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * Represents a comment between declarations or statements (rule and at-rules).\n *\n * Comments inside selectors, at-rule parameters, or declaration values\n * will be stored in the `raws` properties explained above.\n *\n * @extends Node\n */\n\n\nvar Comment = function (_Node) {\n  _inherits(Comment, _Node);\n\n  function Comment(defaults) {\n    _classCallCheck(this, Comment);\n\n    var _this = _possibleConstructorReturn(this, _Node.call(this, defaults));\n\n    _this.type = 'comment';\n    return _this;\n  }\n  /**\n   * @memberof Comment#\n   * @member {string} text - the comment’s text\n   */\n\n  /**\n   * @memberof Comment#\n   * @member {object} raws - Information to generate byte-to-byte equal\n   *                         node string as it was in the origin input.\n   *\n   * Every parser saves its own properties,\n   * but the default CSS parser uses:\n   *\n   * * `before`: the space symbols before the node.\n   * * `left`: the space symbols between `/*` and the comment’s text.\n   * * `right`: the space symbols between the comment’s text.\n   */\n\n\n  return Comment;\n}(_node2.default);\n\nexports.default = Comment;\nmodule.exports = exports['default'];"},"sourceMaps":{"js":{"mappings":[{"source":"comment.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":0}},{"source":"comment.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":4}},{"source":"comment.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":9}},{"source":"comment.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":12}},{"source":"comment.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":19}},{"source":"comment.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":20}},{"source":"comment.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":28}},{"source":"comment.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":29}},{"source":"comment.es6","name":null,"original":{"line":3,"column":0},"generated":{"line":46,"column":0}},{"source":"comment.es6","name":"Comment","original":{"line":11,"column":6},"generated":{"line":56,"column":4}},{"source":"comment.es6","name":null,"original":{"line":13,"column":4},"generated":{"line":59,"column":0}},{"source":"comment.es6","name":null,"original":{"line":13,"column":4},"generated":{"line":59,"column":11}},{"source":"comment.es6","name":null,"original":{"line":13,"column":4},"generated":{"line":59,"column":18}},{"source":"comment.es6","name":"defaults","original":{"line":13,"column":16},"generated":{"line":59,"column":19}},{"source":"comment.es6","name":null,"original":{"line":13,"column":4},"generated":{"line":59,"column":27}},{"source":"comment.es6","name":null,"original":{"line":13,"column":26},"generated":{"line":59,"column":29}},{"source":"comment.es6","name":null,"original":{"line":13,"column":26},"generated":{"line":60,"column":0}},{"source":"comment.es6","name":null,"original":{"line":13,"column":26},"generated":{"line":60,"column":4}},{"source":"comment.es6","name":null,"original":{"line":13,"column":26},"generated":{"line":60,"column":19}},{"source":"comment.es6","name":null,"original":{"line":13,"column":26},"generated":{"line":60,"column":20}},{"source":"comment.es6","name":null,"original":{"line":13,"column":26},"generated":{"line":60,"column":24}},{"source":"comment.es6","name":null,"original":{"line":13,"column":26},"generated":{"line":60,"column":26}},{"source":"comment.es6","name":null,"original":{"line":13,"column":26},"generated":{"line":60,"column":33}},{"source":"comment.es6","name":null,"original":{"line":13,"column":26},"generated":{"line":60,"column":34}},{"source":"comment.es6","name":null,"original":{"line":13,"column":26},"generated":{"line":62,"column":0}},{"source":"comment.es6","name":null,"original":{"line":13,"column":26},"generated":{"line":62,"column":8}},{"source":"comment.es6","name":null,"original":{"line":13,"column":26},"generated":{"line":62,"column":13}},{"source":"comment.es6","name":null,"original":{"line":13,"column":26},"generated":{"line":62,"column":16}},{"source":"comment.es6","name":null,"original":{"line":13,"column":26},"generated":{"line":62,"column":42}},{"source":"comment.es6","name":null,"original":{"line":13,"column":26},"generated":{"line":62,"column":43}},{"source":"comment.es6","name":null,"original":{"line":13,"column":26},"generated":{"line":62,"column":47}},{"source":"comment.es6","name":null,"original":{"line":14,"column":8},"generated":{"line":62,"column":49}},{"source":"comment.es6","name":null,"original":{"line":14,"column":8},"generated":{"line":62,"column":54}},{"source":"comment.es6","name":null,"original":{"line":14,"column":8},"generated":{"line":62,"column":55}},{"source":"comment.es6","name":null,"original":{"line":14,"column":8},"generated":{"line":62,"column":59}},{"source":"comment.es6","name":null,"original":{"line":14,"column":8},"generated":{"line":62,"column":60}},{"source":"comment.es6","name":null,"original":{"line":14,"column":8},"generated":{"line":62,"column":64}},{"source":"comment.es6","name":"defaults","original":{"line":14,"column":14},"generated":{"line":62,"column":66}},{"source":"comment.es6","name":null,"original":{"line":14,"column":8},"generated":{"line":62,"column":74}},{"source":"comment.es6","name":null,"original":{"line":13,"column":26},"generated":{"line":62,"column":75}},{"source":"comment.es6","name":null,"original":{"line":13,"column":26},"generated":{"line":62,"column":76}},{"source":"comment.es6","name":null,"original":{"line":15,"column":8},"generated":{"line":64,"column":0}},{"source":"comment.es6","name":null,"original":{"line":15,"column":8},"generated":{"line":64,"column":4}},{"source":"comment.es6","name":null,"original":{"line":15,"column":8},"generated":{"line":64,"column":9}},{"source":"comment.es6","name":"type","original":{"line":15,"column":13},"generated":{"line":64,"column":10}},{"source":"comment.es6","name":null,"original":{"line":15,"column":8},"generated":{"line":64,"column":14}},{"source":"comment.es6","name":null,"original":{"line":15,"column":20},"generated":{"line":64,"column":17}},{"source":"comment.es6","name":null,"original":{"line":15,"column":8},"generated":{"line":64,"column":26}},{"source":"comment.es6","name":null,"original":{"line":13,"column":26},"generated":{"line":65,"column":0}},{"source":"comment.es6","name":null,"original":{"line":13,"column":26},"generated":{"line":65,"column":11}},{"source":"comment.es6","name":null,"original":{"line":13,"column":26},"generated":{"line":65,"column":16}},{"source":"comment.es6","name":null,"original":{"line":16,"column":5},"generated":{"line":66,"column":0}},{"source":"comment.es6","name":null,"original":{"line":18,"column":4},"generated":{"line":67,"column":0}},{"source":"comment.es6","name":null,"original":{"line":23,"column":4},"generated":{"line":72,"column":0}},{"source":"comment.es6","name":"Node","original":{"line":11,"column":22},"generated":{"line":87,"column":2}},{"source":"comment.es6","name":"Node","original":{"line":11,"column":22},"generated":{"line":87,"column":8}},{"source":"comment.es6","name":"Node","original":{"line":11,"column":22},"generated":{"line":87,"column":9}},{"source":"comment.es6","name":"Comment","original":{"line":37,"column":15},"generated":{"line":89,"column":18}}],"sources":{"comment.es6":"import Node from './node';\n\n/**\n * Represents a comment between declarations or statements (rule and at-rules).\n *\n * Comments inside selectors, at-rule parameters, or declaration values\n * will be stored in the `raws` properties explained above.\n *\n * @extends Node\n */\nclass Comment extends Node {\n\n    constructor(defaults) {\n        super(defaults);\n        this.type = 'comment';\n    }\n\n    /**\n     * @memberof Comment#\n     * @member {string} text - the comment’s text\n     */\n\n    /**\n     * @memberof Comment#\n     * @member {object} raws - Information to generate byte-to-byte equal\n     *                         node string as it was in the origin input.\n     *\n     * Every parser saves its own properties,\n     * but the default CSS parser uses:\n     *\n     * * `before`: the space symbols before the node.\n     * * `left`: the space symbols between `/*` and the comment’s text.\n     * * `right`: the space symbols between the comment’s text.\n     */\n}\n\nexport default Comment;\n"},"lineCount":null}},"error":null,"hash":"b5a06c36ae208cc67eef870e15bf8a41","cacheData":{"env":{}}}