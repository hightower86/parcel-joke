{"id":"node_modules/postcss/lib/declaration.js","dependencies":[{"name":"/Users/macbook/Desktop/KODING/Traversy-Media/parcel/parsel-joke/package.json","includedInParent":true,"mtime":1565716104892},{"name":"/Users/macbook/Desktop/KODING/Traversy-Media/parcel/parsel-joke/node_modules/postcss/package.json","includedInParent":true,"mtime":1558416471631},{"name":"./node","loc":{"line":5,"column":20},"parent":"/Users/macbook/Desktop/KODING/Traversy-Media/parcel/parsel-joke/node_modules/postcss/lib/declaration.js","resolved":"/Users/macbook/Desktop/KODING/Traversy-Media/parcel/parsel-joke/node_modules/postcss/lib/node.js"}],"generated":{"js":"'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function (obj) { return typeof obj; }; } else { _typeof = function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nexports.__esModule = true;\n\nvar _node = require('./node');\n\nvar _node2 = _interopRequireDefault(_node);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (_typeof(call) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + _typeof(superClass));\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * Represents a CSS declaration.\n *\n * @extends Node\n *\n * @example\n * const root = postcss.parse('a { color: black }');\n * const decl = root.first.first;\n * decl.type       //=> 'decl'\n * decl.toString() //=> ' color: black'\n */\n\n\nvar Declaration = function (_Node) {\n  _inherits(Declaration, _Node);\n\n  function Declaration(defaults) {\n    _classCallCheck(this, Declaration);\n\n    var _this = _possibleConstructorReturn(this, _Node.call(this, defaults));\n\n    _this.type = 'decl';\n    return _this;\n  }\n  /**\n   * @memberof Declaration#\n   * @member {string} prop - the declaration’s property name\n   *\n   * @example\n   * const root = postcss.parse('a { color: black }');\n   * const decl = root.first.first;\n   * decl.prop //=> 'color'\n   */\n\n  /**\n   * @memberof Declaration#\n   * @member {string} value - the declaration’s value\n   *\n   * @example\n   * const root = postcss.parse('a { color: black }');\n   * const decl = root.first.first;\n   * decl.value //=> 'black'\n   */\n\n  /**\n   * @memberof Declaration#\n   * @member {boolean} important - `true` if the declaration\n   *                               has an !important annotation.\n   *\n   * @example\n   * const root = postcss.parse('a { color: black !important; color: red }');\n   * root.first.first.important //=> true\n   * root.first.last.important  //=> undefined\n   */\n\n  /**\n   * @memberof Declaration#\n   * @member {object} raws - Information to generate byte-to-byte equal\n   *                         node string as it was in the origin input.\n   *\n   * Every parser saves its own properties,\n   * but the default CSS parser uses:\n   *\n   * * `before`: the space symbols before the node. It also stores `*`\n   *   and `_` symbols before the declaration (IE hack).\n   * * `between`: the symbols between the property and value\n   *   for declarations.\n   * * `important`: the content of the important statement,\n   *   if it is not just `!important`.\n   *\n   * PostCSS cleans declaration from comments and extra spaces,\n   * but it stores origin content in raws properties.\n   * As such, if you don’t change a declaration’s value,\n   * PostCSS will use the raw value with comments.\n   *\n   * @example\n   * const root = postcss.parse('a {\\n  color:black\\n}')\n   * root.first.first.raws //=> { before: '\\n  ', between: ':' }\n   */\n\n\n  return Declaration;\n}(_node2.default);\n\nexports.default = Declaration;\nmodule.exports = exports['default'];"},"sourceMaps":{"js":{"mappings":[{"source":"declaration.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":0}},{"source":"declaration.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":4}},{"source":"declaration.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":9}},{"source":"declaration.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":12}},{"source":"declaration.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":19}},{"source":"declaration.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":20}},{"source":"declaration.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":28}},{"source":"declaration.es6","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":29}},{"source":"declaration.es6","name":null,"original":{"line":3,"column":0},"generated":{"line":46,"column":0}},{"source":"declaration.es6","name":"Declaration","original":{"line":14,"column":6},"generated":{"line":59,"column":4}},{"source":"declaration.es6","name":null,"original":{"line":16,"column":4},"generated":{"line":62,"column":0}},{"source":"declaration.es6","name":null,"original":{"line":16,"column":4},"generated":{"line":62,"column":11}},{"source":"declaration.es6","name":null,"original":{"line":16,"column":4},"generated":{"line":62,"column":22}},{"source":"declaration.es6","name":"defaults","original":{"line":16,"column":16},"generated":{"line":62,"column":23}},{"source":"declaration.es6","name":null,"original":{"line":16,"column":4},"generated":{"line":62,"column":31}},{"source":"declaration.es6","name":null,"original":{"line":16,"column":26},"generated":{"line":62,"column":33}},{"source":"declaration.es6","name":null,"original":{"line":16,"column":26},"generated":{"line":63,"column":0}},{"source":"declaration.es6","name":null,"original":{"line":16,"column":26},"generated":{"line":63,"column":4}},{"source":"declaration.es6","name":null,"original":{"line":16,"column":26},"generated":{"line":63,"column":19}},{"source":"declaration.es6","name":null,"original":{"line":16,"column":26},"generated":{"line":63,"column":20}},{"source":"declaration.es6","name":null,"original":{"line":16,"column":26},"generated":{"line":63,"column":24}},{"source":"declaration.es6","name":null,"original":{"line":16,"column":26},"generated":{"line":63,"column":26}},{"source":"declaration.es6","name":null,"original":{"line":16,"column":26},"generated":{"line":63,"column":37}},{"source":"declaration.es6","name":null,"original":{"line":16,"column":26},"generated":{"line":63,"column":38}},{"source":"declaration.es6","name":null,"original":{"line":16,"column":26},"generated":{"line":65,"column":0}},{"source":"declaration.es6","name":null,"original":{"line":16,"column":26},"generated":{"line":65,"column":8}},{"source":"declaration.es6","name":null,"original":{"line":16,"column":26},"generated":{"line":65,"column":13}},{"source":"declaration.es6","name":null,"original":{"line":16,"column":26},"generated":{"line":65,"column":16}},{"source":"declaration.es6","name":null,"original":{"line":16,"column":26},"generated":{"line":65,"column":42}},{"source":"declaration.es6","name":null,"original":{"line":16,"column":26},"generated":{"line":65,"column":43}},{"source":"declaration.es6","name":null,"original":{"line":16,"column":26},"generated":{"line":65,"column":47}},{"source":"declaration.es6","name":null,"original":{"line":17,"column":8},"generated":{"line":65,"column":49}},{"source":"declaration.es6","name":null,"original":{"line":17,"column":8},"generated":{"line":65,"column":54}},{"source":"declaration.es6","name":null,"original":{"line":17,"column":8},"generated":{"line":65,"column":55}},{"source":"declaration.es6","name":null,"original":{"line":17,"column":8},"generated":{"line":65,"column":59}},{"source":"declaration.es6","name":null,"original":{"line":17,"column":8},"generated":{"line":65,"column":60}},{"source":"declaration.es6","name":null,"original":{"line":17,"column":8},"generated":{"line":65,"column":64}},{"source":"declaration.es6","name":"defaults","original":{"line":17,"column":14},"generated":{"line":65,"column":66}},{"source":"declaration.es6","name":null,"original":{"line":17,"column":8},"generated":{"line":65,"column":74}},{"source":"declaration.es6","name":null,"original":{"line":16,"column":26},"generated":{"line":65,"column":75}},{"source":"declaration.es6","name":null,"original":{"line":16,"column":26},"generated":{"line":65,"column":76}},{"source":"declaration.es6","name":null,"original":{"line":18,"column":8},"generated":{"line":67,"column":0}},{"source":"declaration.es6","name":null,"original":{"line":18,"column":8},"generated":{"line":67,"column":4}},{"source":"declaration.es6","name":null,"original":{"line":18,"column":8},"generated":{"line":67,"column":9}},{"source":"declaration.es6","name":"type","original":{"line":18,"column":13},"generated":{"line":67,"column":10}},{"source":"declaration.es6","name":null,"original":{"line":18,"column":8},"generated":{"line":67,"column":14}},{"source":"declaration.es6","name":null,"original":{"line":18,"column":20},"generated":{"line":67,"column":17}},{"source":"declaration.es6","name":null,"original":{"line":18,"column":8},"generated":{"line":67,"column":23}},{"source":"declaration.es6","name":null,"original":{"line":16,"column":26},"generated":{"line":68,"column":0}},{"source":"declaration.es6","name":null,"original":{"line":16,"column":26},"generated":{"line":68,"column":11}},{"source":"declaration.es6","name":null,"original":{"line":16,"column":26},"generated":{"line":68,"column":16}},{"source":"declaration.es6","name":null,"original":{"line":19,"column":5},"generated":{"line":69,"column":0}},{"source":"declaration.es6","name":null,"original":{"line":21,"column":4},"generated":{"line":70,"column":0}},{"source":"declaration.es6","name":null,"original":{"line":31,"column":4},"generated":{"line":80,"column":0}},{"source":"declaration.es6","name":null,"original":{"line":41,"column":4},"generated":{"line":90,"column":0}},{"source":"declaration.es6","name":null,"original":{"line":52,"column":4},"generated":{"line":101,"column":0}},{"source":"declaration.es6","name":"Node","original":{"line":14,"column":26},"generated":{"line":128,"column":2}},{"source":"declaration.es6","name":"Node","original":{"line":14,"column":26},"generated":{"line":128,"column":8}},{"source":"declaration.es6","name":"Node","original":{"line":14,"column":26},"generated":{"line":128,"column":9}},{"source":"declaration.es6","name":"Declaration","original":{"line":79,"column":15},"generated":{"line":130,"column":18}}],"sources":{"declaration.es6":"import Node from './node';\n\n/**\n * Represents a CSS declaration.\n *\n * @extends Node\n *\n * @example\n * const root = postcss.parse('a { color: black }');\n * const decl = root.first.first;\n * decl.type       //=> 'decl'\n * decl.toString() //=> ' color: black'\n */\nclass Declaration extends Node {\n\n    constructor(defaults) {\n        super(defaults);\n        this.type = 'decl';\n    }\n\n    /**\n     * @memberof Declaration#\n     * @member {string} prop - the declaration’s property name\n     *\n     * @example\n     * const root = postcss.parse('a { color: black }');\n     * const decl = root.first.first;\n     * decl.prop //=> 'color'\n     */\n\n    /**\n     * @memberof Declaration#\n     * @member {string} value - the declaration’s value\n     *\n     * @example\n     * const root = postcss.parse('a { color: black }');\n     * const decl = root.first.first;\n     * decl.value //=> 'black'\n     */\n\n    /**\n     * @memberof Declaration#\n     * @member {boolean} important - `true` if the declaration\n     *                               has an !important annotation.\n     *\n     * @example\n     * const root = postcss.parse('a { color: black !important; color: red }');\n     * root.first.first.important //=> true\n     * root.first.last.important  //=> undefined\n     */\n\n    /**\n     * @memberof Declaration#\n     * @member {object} raws - Information to generate byte-to-byte equal\n     *                         node string as it was in the origin input.\n     *\n     * Every parser saves its own properties,\n     * but the default CSS parser uses:\n     *\n     * * `before`: the space symbols before the node. It also stores `*`\n     *   and `_` symbols before the declaration (IE hack).\n     * * `between`: the symbols between the property and value\n     *   for declarations.\n     * * `important`: the content of the important statement,\n     *   if it is not just `!important`.\n     *\n     * PostCSS cleans declaration from comments and extra spaces,\n     * but it stores origin content in raws properties.\n     * As such, if you don’t change a declaration’s value,\n     * PostCSS will use the raw value with comments.\n     *\n     * @example\n     * const root = postcss.parse('a {\\n  color:black\\n}')\n     * root.first.first.raws //=> { before: '\\n  ', between: ':' }\n     */\n\n}\n\nexport default Declaration;\n"},"lineCount":null}},"error":null,"hash":"0e864297ae022a97f28465c22d5a052a","cacheData":{"env":{}}}